**************************** UserService *********************

import { Injectable } from '@angular/core';
import {Http,Response,Headers,RequestOptions} from '@angular/http'
import {Observable} from 'rxjs/Observable'
import 'rxjs/add/operator/map'
import 'rxjs/add/operator/catch'
import 'rxjs/add/Observable/throw'


import {User} from '../user'

@Injectable({
  providedIn: 'root'
})
export class UserService {
  private user:User;
 private baseUrl:string="http://localhost:8070/api";
 private headers=new Headers({'Content-Type':'application/json'});
 private options=new RequestOptions({headers:this.headers})
  constructor(private _http:Http) { }
setter(user:User){
  this.user=user;
}
getter(){
  return this.user;
}
  getUsers(){
    return this._http.get(this.baseUrl+'/users',this.options).map((response:Response)=>response.json()).catch(this.errorHandler);
  }
  getUser(id:Number){
    return this._http.get(this.baseUrl+'/user/'+id,this.options).map((response:Response)=>response.json()).catch(this.errorHandler);

  }
  deleteUser(id:Number){
    return this._http.delete(this.baseUrl+'/user/'+id,this.options).map((response:Response)=>response.json()).catch(this.errorHandler);

  }
  createUser(user:User){
    return this._http.post(this.baseUrl+'/user',JSON.stringify(user),this.options).map((response:Response)=>response.json()).catch(this.errorHandler);

  }
  updateUser(user:User){
    return this._http.put(this.baseUrl+'/user/',JSON.stringify(user),this.options).map((response:Response)=>response.json()).catch(this.errorHandler);

  }
  errorHandler(error:Response){
    return Observable.throw(error|| "SERVER ERROR");
  }
}


*************************** APP>MODULE.TS**********

import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import {RouterModule,Routes} from '@angular/router'
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { ListuserComponent } from './components/listuser/listuser.component';
import { UserformComponent } from './components/userform/userform.component';
import{HttpModule} from '@angular/http'
import{UserService} from './shared-service/user.service'
import{FormsModule} from '@angular/forms'

    routing=>                      const routes: Routes = [{path:'',component:ListuserComponent},
                           {path:'op',component:UserformComponent}];

@NgModule({
  declarations: [
    AppComponent,
    ListuserComponent,
    UserformComponent
  ],
  imports: [
    FormsModule,
    HttpModule,
    BrowserModule,
    AppRoutingModule,
    RouterModule
  ],
  providers: [UserService],
  bootstrap: [AppComponent]
})
export class AppModule { }

************************* LIST USER.HTML*****

<div class="container">
<table class="table table-striped">
    <thead>
        <th>ID</th>
        <th>First Name</th>
        <th>Last Name</th>
        <th>Operations</th>
    </thead>
    <tbody>
        <tr *ngFor="let user of users">
            <td>{{user.id}}</td>
            <td>{{user.fName}}</td>
            <td>{{user.lName}}</td>
            <td><button class="btn btn-danger" (click)="deleteUser(user)">Delete</button>
          <button class="btn btn-primary"(click)="updateUser(user)">Edit</button></td>


        </tr>
    </tbody>
</table>
<td><button class="btn btn-primary"(click)="newUser()">New User</button></td>

</div>
**************** ListUSER.TS*****************
import { Component, OnInit } from '@angular/core';
import {UserService} from '../../shared-service/user.service'
import {User} from '../../user'
import {Router} from '@angular/router'
@Component({
  selector: 'app-listuser',
  templateUrl: './listuser.component.html',
  styleUrls: ['./listuser.component.css']
})
export class ListuserComponent implements OnInit {
 private users:User[];
  constructor(private _userService:UserService,private _router:Router) { }

  ngOnInit() {
    this._userService.getUsers().subscribe((a)=>{
      console.log(a);
      this.users=a;
    },(error)=>{
      console.log(error);
    })
  }
  deleteUser(user){
    this._userService.deleteUser(user.id).subscribe((data)=>{
      this.users.splice(this.users.indexOf(user),1);
    },(error)=>{
      console.log(error);
    }
    )
  }
  updateUser(user){
    this._userService.setter(user);
    this._router.navigate(['/op']);
  }
  newUser(){
    let user=new User();
    this._userService.setter(user);
    this._router.navigate(['/op']);
  }

}
*********************************UserForm.html*******

<div class="container">
    <form (ngSubmit)="processForm()">
        <div class="form group">
            <input type="text" name="id" class="form-control" [(ngModel)]="user.id">
        </div>
        <div class="form group">
            <label for="fName">First Name</label>
            <input type="text" name="fName" class="form-control" [(ngModel)]="user.fName">
        </div>
        <div class="form group">
                <label for="lName">Last Name</label>
                <input type="text" name="lName" class="form-control" [(ngModel)]="user.lName">
            </div>
            <input type="submit" value="save" class="btn btn-success">
    </form>
</div>
*********************userform.ts********************
import { Component, OnInit } from '@angular/core';
import {User} from '../../user'
import {Router} from '@angular/router'
import {UserService} from '../../shared-service/user.service'

@Component({
  selector: 'app-userform',
  templateUrl: './userform.component.html',
  styleUrls: ['./userform.component.css']
})
export class UserformComponent implements OnInit {
private user:User
  constructor(private _userService:UserService,private _router:Router) { }

  ngOnInit() {
    this.user=this._userService.getter()

  }
  processForm(){
      if(this.user.id==undefined){
        this._userService.createUser(this.user).subscribe((user)=>{
          console.log(user);
          this._router.navigate(['/']);
        },(error)=>{
          console.log(error);
        })
      }else{
        this._userService.updateUser(this.user).subscribe((user)=>{
           console.log(user);
           this._router.navigate(['/']);
        },(error)=>{
          console.log(error);
        })
      }
  }

}

*****
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$&&&&&&&&&&&&++++   Spring Boot   &&
package com.dsrc.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.dsrc.entities.User;
import com.dsrc.repositories.UserRepositories;

@RestController
@RequestMapping("/api")
@CrossOrigin(origins="http://localhost:4231",allowedHeaders="*")
public class UserController {
	@Autowired
	public UserRepositories userRepository;
 
	@GetMapping("/users")
	public List<User> getUsers(){
		return userRepository.findAll();
	}
	
	@GetMapping("/user/{id}")
	public User getUser(@PathVariable Long id) {
		User obj=null;
		Optional<User> ff=userRepository.findById(id);
		if(ff.isPresent()) {
			obj=ff.get();
		}
		return obj;
		
	}
	
	@DeleteMapping("/user/{id}")
	public boolean deleteUser(@PathVariable Long id) {
		userRepository.deleteById(id);
		return true;
	}
	
	@PutMapping("/user")
	public User updateUser(@RequestBody User user) {
		return userRepository.save(user);
	}
	
	@PostMapping("/user")
	public User createUser(@RequestBody User user) {
		return userRepository.save(user);
	}
	
}


&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
server.port=8070
spring.datasource.url=jdbc:mysql://localhost:3306/springdb
spring.datasource.username=root
spring.datasource.password=dsrc
spring.jpa.hibernate.ddl-auto=update

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
package com.dsrc;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

import com.dsrc.entities.User;
import com.dsrc.repositories.UserRepositories;

@SpringBootApplication
@Configuration(value = "service")
public class CurdBackendApplication implements CommandLineRunner {

	@Autowired
	private UserRepositories userRepository;
	public static void main(String[] args) {
		SpringApplication.run(CurdBackendApplication.class, args);
	}
	
	@Bean
	public WebMvcConfigurer configurer(){
	  return new WebMvcConfigurer(){
	    @Override
	    public void addCorsMappings(CorsRegistry registry) {
            registry.addMapping("/**").allowedMethods("GET", "POST", "PUT", "DELETE").allowedOrigins("*")
                    .allowedHeaders("*");
        }
	  };
	}
	@Override
	public void run(String... args) throws Exception {
		userRepository.save(new User("one","one"));	
		userRepository.save(new User("two","two"));		
		userRepository.save(new User("three","three"));		

	}
 
}

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
package com.dsrc.repositories;

import org.springframework.data.jpa.repository.JpaRepository;

import com.dsrc.entities.User;

public interface UserRepositories extends JpaRepository<User,Long> {

}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

